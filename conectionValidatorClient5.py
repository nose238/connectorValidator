#!/usr/bin/python
#Eduardo Marquez
#before executing this code it MUST exist: 
#1. sshpass MUST be installed on terminal ***sudo apt-get install sshpass*** 

##################Importing libraries#####################
import time
import commands
import os
from daemon import runner
###########Daemonization part starts######################
class App():
    def __init__(self):
        self.stdin_path = '/dev/null'
        self.stdout_path = '/dev/tty'
        self.stderr_path = '/dev/tty'
        self.pidfile_path =  '/tmp/foo.pid'
        self.pidfile_timeout = 5
    def run(self):
###########Daemonization part ends########################
#---------------------MAIN-------------------------------#        
        while True:
            ##########read server data
            temp = 0 #used to eliminate the last character in strings
            txt = open("/home/software/Escritorio/userServer.txt", "r")
            userServer = txt.read()
            temp = len(userServer)
            userServer = userServer[:temp-1]
            txt.close()
            txt = open("/home/software/Escritorio/serverIP.txt", "r")
            serverIP = txt.read()
            temp = len(serverIP)
            serverIP = serverIP[:temp-1]
            txt.close()
            txt = open("/home/software/Escritorio/portServer.txt", "r")
            portServer = txt.read()
            temp = len(portServer)
            portServer = portServer[:temp-1]
            txt.close()
            txt = open("/home/software/Escritorio/pswServer.txt", "r")
            pswServer = txt.read()
            temp = len(pswServer)
            pswServer = pswServer[:temp-1]
            txt.close()
            host = commands.getoutput("hostname -fs") # Client's host
            user = commands.getoutput("whoami")       # Client's User
            txtStatus = open("/home/software/Escritorio/sshStatus.txt", "w") #change to correct path
            status = commands.getstatusoutput("sshpass -p '' ssh -o StrictHostKeyChecking=no "+userServer+"@"+serverIP+" -p "+portServer)#it verifies if public key is on the server  
            if status[0] == 0: # return 0 whit no errors. Public key on in the server
                print("Key found")
                txtStatus.write("0")
            elif status[0] == 1280: #Error Server found but password does not match... somehow key is not on the server
                print("Key not found... Trying to copy public key")
                #has public key been generated by client?
                txtStatus.write("1")
                if user == "root":
                    key_status = commands.getoutput("if [ -f /"+user+"/.ssh/id_rsa ]; then echo \"Key found... trying to copy to the server...\" ; else ssh-keygen -t rsa -f /"+user+"/.ssh/id_rsa -q -P \"\"; echo \"Key generated... Trying to copy to the server\"; fi")
                else:
                    key_status = commands.getoutput("if [ -f /home/"+user+"/.ssh/id_rsa ]; then echo \"Key found... trying to copy to the server...\" ; else ssh-keygen -t rsa -f /home/"+user+"/.ssh/id_rsa -q -P \"\"; echo \"Key generated... Trying to copy to the server\"; fi")
                print(key_status)
                #if public key doesn't exist this line creates it 
                key_status = commands.getoutput("sshpass -p \""+pswServer+"\" ssh-copy-id -o StrictHostKeyChecking=no "+userServer+"@"+serverIP+" -p "+portServer) 
            else: #any other error
                print("Server not found")
                txtStatus.write("2")
            time.sleep(5)
#---------------------MAIN-------------------------------#        
###########Daemonization part starts######################
app = App()
daemon_runner = runner.DaemonRunner(app)
daemon_runner.do_action()
###########Daemonization part ends########################